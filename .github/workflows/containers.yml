name: Containers

env:
  zephyr-version: 2.4.0
  zephyr-sdk-version: 0.11.4
  cache-repository-name: zmk-docker-cache

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency: ${{ github.ref }}

jobs:
  namespaces:
    runs-on: ubuntu-latest
    outputs:
      docker-hub: ${{ secrets.DOCKER_HUB_NAMESPACE || github.repository_owner }}
      ghcr: ${{ github.repository_owner }}
    steps:
      - run: exit
  credentials:
    runs-on: ubuntu-latest
    outputs:
      ghcr: ${{ steps.ghcr.outcome == 'success' }}
      docker-hub: ${{ steps.docker-hub.outcome == 'success' }}
    steps:
      - name: Docker Hub
        id: docker-hub
        run: if [ ${{ secrets.DOCKER_HUB_USERNAME == null || secrets.DOCKER_HUB_TOKEN == null }} = true ]; then exit 1; fi
        continue-on-error: true
      - name: GitHub Container Registry
        id: ghcr
        run: if [ ${{ secrets.GHCR_USERNAME == null || secrets.GHCR_TOKEN == null }} = true ]; then exit 1; fi
        continue-on-error: true
  architectures:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.import.outputs.json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Import from architectures.yml
        id: import
        shell: python
        run: |
          import yaml, json
          with open('architectures.yml', 'r') as file:
            architectures = yaml.safe_load(file)
            print('::set-output name=json::' + json.dumps(architectures))
  tags:
    runs-on: ubuntu-latest
    outputs:
      candidate: ${{ steps.definitions.outputs.candidate }}
      versions: ${{ steps.definitions.outputs.versions }}
      major-minor: ${{ steps.definitions.outputs.major-minor }}
      latest: ${{ steps.definitions.outputs.latest }}
    steps:
      - name: Definitions
        id: definitions
        env:
          SHA: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
          ZEPHYR_VERSION: ${{ env.zephyr-version }}
          ZEPHYR_SDK_VERSION: ${{ env.zephyr-sdk-version }}
        run: |
          CANDIDATE=${GITHUB_REF#refs/heads/}-${ZEPHYR_VERSION}-${ZEPHYR_SDK_VERSION}-$(date +%Y%m%d%H%M%S)-${SHA}-${RUN_ID}
          VERSIONS=${ZEPHYR_VERSION}-${ZEPHYR_SDK_VERSION}
          MAJOR=$(echo ${ZEPHYR_VERSION} | cut -d'.' -f 1)
          MINOR=$(echo ${ZEPHYR_VERSION} | cut -d'.' -f 2)
          MAJOR_MINOR=${MAJOR}.${MINOR}
          LATEST=${MAJOR_MINOR}

          echo ::set-output name=candidate::${CANDIDATE}
          echo ::set-output name=versions::${VERSIONS}
          echo ::set-output name=major-minor::${MAJOR_MINOR}
          echo ::set-output name=latest::${LATEST}
  candidates:
    needs:
      - namespaces
      - credentials
      - architectures
      - tags
    if: ${{ !startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    env:
      docker-args: --rm --workdir /github/workspace -v /var/run/docker.sock:/var/run/docker.sock -v /home/runner/work/_temp:/home/runner/work/_temp -v /home/runner/work/_temp/_github_home:/github/home -v /home/runner/work/_temp/_github_workflow:/github/workflow -v /home/runner/work/_temp/_runner_file_commands:/github/file_commands -v ${{ github.workspace }}:/github/workspace
    defaults:
      run:
        shell: /usr/bin/docker exec candidate /bin/bash {0}
    strategy:
      max-parallel: 1 # takes advantage of caching between jobs
      matrix: 
        architecture: ${{ fromJSON(needs.architectures.outputs.json) }}
        target: # ordered from biggest to smallest to take advantage of the registry cache
          - dev
          - build
        include:
          - architecture: arm
            board: nice_nano
            shield: kyria_left
    steps:
      - name: Login to Docker Hub
        id: docker-hub-login
        if: ${{ needs.credentials.outputs.docker-hub == 'true' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Login to GitHub Container Registry
        id: ghcr-login
        if: ${{ needs.credentials.outputs.ghcr == 'true' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Define repository
        id: repository
        shell: bash
        run: echo ::set-output name=name::zmk-${{ matrix.target }}-${{ matrix.architecture }}
      - name: Define branch name
        id: branch
        run: echo ::set-output name=name::${GITHUB_REF#refs/heads/}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and load candidate image
        id: build-push
        uses: docker/build-push-action@v2
        with:
          target: ${{ matrix.target }}
          build-args: |
            ZEPHYR_VERSION=${{ env.zephyr-version }}
            ARCHITECTURE=${{ matrix.architecture }}
            ZEPHYR_SDK_VERSION=${{ env.zephyr-sdk-version }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          tags: |
            docker.io/${{ needs.namespaces.outputs.docker-hub }}/${{ steps.repository.outputs.name }}:${{ needs.tags.outputs.candidate }}
          cache-from: type=registry,ref=docker.io/${{ needs.namespaces.outputs.docker-hub }}/${{ env.cache-repository-name }}:${{ steps.branch.outputs.name }}-${{ matrix.architecture }}
          cache-to: ${{ (steps.docker-hub-login.outcome == 'success') && (matrix.target == 'dev') && format('type=registry,ref=docker.io/{0}/{1}:{2}-{3},mode=max', needs.namespaces.outputs.docker-hub, env.cache-repository-name, steps.branch.outputs.name, matrix.architecture) || null }}
          load: true
      - name: Create and run container from candidate image
        shell: bash
        run: docker run -d -it --name candidate ${{ env.docker-args }} docker.io/${{ needs.namespaces.outputs.docker-hub }}/${{ steps.repository.outputs.name }}:${{ needs.tags.outputs.candidate }}
      - name: Checkout ZMK
        uses: actions/checkout@v2
        with:
          repository: zmkfirmware/zmk
      - name: Cache west modules
        uses: actions/cache@v2
        env:
          cache-name: zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('app/west.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Test west init
        run: west init -l app
      - name: Test west update
        run: west update
      - name: Test west zephyr-export
        run: west zephyr-export
      - name: Test west build
        run: west build -s app -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}
        if: ${{ matrix.board != null && matrix.shield != null }}
      #- name: Test west test
      #  run: west test
      - name: Test clang-format
        if: ${{ matrix.target == 'dev' }}
        run: clang-format --version
      - name: Test node
        if: ${{ matrix.target == 'dev' }}
        run: node --version
      - name: Test docs ci
        if: ${{ matrix.target == 'dev' }}
        run: cd docs && npm ci
      - name: Test docs lint
        if: ${{ matrix.target == 'dev' }}
        run: cd docs && npm run lint
      - name: Test docs prettier check
        if: ${{ matrix.target == 'dev' }}
        run: cd docs && npm run prettier:check
      - name: Test docs start (webpack-dev-server)
        if: ${{ matrix.target == 'dev' }}
        run: cd docs && timeout -s SIGINT 20 npm run start &
      - run: sleep 15
        if: ${{ matrix.target == 'dev' }}
      - name: Test docs wget (webpack-dev-server)
        if: ${{ matrix.target == 'dev' }}
        run: wget http://localhost:3000
      - run: sleep 10
        if: ${{ matrix.target == 'dev' }}
      - name: Test docs build (webpack)
        if: ${{ matrix.target == 'dev' }}
        run: cd docs && npm run build
      - name: Test docs serve (webpack)
        if: ${{ matrix.target == 'dev' }}
        run: cd docs && timeout -s SIGINT 10 npm run serve &
      - run: sleep 5
        if: ${{ matrix.target == 'dev' }}
      - name: Test docs wget (webpack)
        if: ${{ matrix.target == 'dev' }}
        run: wget http://localhost:3000
      - name: Test ssh
        if: ${{ matrix.target == 'dev' }}
        run: ssh -V
      - name: Stop container
        shell: bash
        run: docker stop candidate
      - name: Push candidate image to registry
        if: ${{ steps.docker-hub-login.outcome == 'success' }}
        shell: bash
        run: docker image push docker.io/${{ needs.namespaces.outputs.docker-hub }}/${{ steps.repository.outputs.name }}:${{ needs.tags.outputs.candidate }}
  release-trigger:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.match.outputs.tag }}
      branch: ${{ steps.match.outputs.branch }}
      zephyr-version: ${{ steps.match.outputs.zephyr-version }}
      zephyr-version-major: ${{ steps.match.outputs.zephyr-version-major }}
      zephyr-version-minor: ${{ steps.match.outputs.zephyr-version-minor }}
      zephyr-version-patch: ${{ steps.match.outputs.zephyr-version-patch }}
      zephyr-sdk-version: ${{ steps.match.outputs.zephyr-sdk-version }}
      zephyr-sdk-version-major: ${{ steps.match.outputs.zephyr-sdk-version-major }}
      zephyr-sdk-version-minor: ${{ steps.match.outputs.zephyr-sdk-version-minor }}
      zephyr-sdk-version-patch: ${{ steps.match.outputs.zephyr-sdk-version-patch }}
      date: ${{ steps.match.outputs.date }}
      time: ${{ steps.match.outputs.time }}
      year: ${{ steps.match.outputs.year }}
      month: ${{ steps.match.outputs.month }}
      day: ${{ steps.match.outputs.day }}
      hour: ${{ steps.match.outputs.hour }}
      minute: ${{ steps.match.outputs.minute }}
      second: ${{ steps.match.outputs.second }}
      sha: ${{ steps.match.outputs.sha }}
      run-id: ${{ steps.match.outputs.run-id }}
    steps:
      - name: Is tag a release trigger?
        id: match
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          PATTERN="^(.+?)-(([0-9]+)\.([0-9]+)\.([0-9]+))-(([0-9]+)\.([0-9]+)\.([0-9]+))-((([0-9]{4})(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))((?:([01]?\d|2[0-3])([0-5]?\d))?([0-5]?\d)))-([0-9a-fA-F]+)-([0-9]+)$"
          if [[ "${TAG}" =~ $PATTERN ]]; then
            echo ::set-output name=tag::${TAG}
            echo ::set-output name=branch::${BASH_REMATCH[1]}
            echo ::set-output name=zephyr-version::${BASH_REMATCH[2]}
            echo ::set-output name=zephyr-version-major::${BASH_REMATCH[3]}
            echo ::set-output name=zephyr-version-minor::${BASH_REMATCH[4]}
            echo ::set-output name=zephyr-version-patch::${BASH_REMATCH[5]}
            echo ::set-output name=zephyr-sdk-version::${BASH_REMATCH[6]}
            echo ::set-output name=zephyr-sdk-version-major::${BASH_REMATCH[7]}
            echo ::set-output name=zephyr-sdk-version-minor::${BASH_REMATCH[8]}
            echo ::set-output name=zephyr-sdk-version-patch::${BASH_REMATCH[9]}
            echo ::set-output name=date::${BASH_REMATCH[10]}
            echo ::set-output name=time::${BASH_REMATCH[11]}
            echo ::set-output name=year::${BASH_REMATCH[12]}
            echo ::set-output name=month::${BASH_REMATCH[13]}
            echo ::set-output name=day::${BASH_REMATCH[14]}
            echo ::set-output name=hour::${BASH_REMATCH[16]}
            echo ::set-output name=minute::${BASH_REMATCH[17]}
            echo ::set-output name=second::${BASH_REMATCH[18]}
            SHA=${BASH_REMATCH[19]}
            echo ::set-output name=sha::${SHA}
            echo ::set-output name=run-id::${BASH_REMATCH[20]}

            if [ "${{ github.sha }}" != "${SHA}" ]; then
              echo "Git hashes do not match!"
              echo "Docker tag: ${SHA}"
              echo "Git tag: ${{ github.sha }}"
              exit 1
            fi
          else
            echo "Tag not recognised, ignoring ..."
          fi
        continue-on-error: true
  releases:
    needs:
      - namespaces
      - credentials
      - architectures
      - tags
      - release-trigger
    if: ${{ needs.release-trigger.outputs.sha != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: ${{ fromJSON(needs.architectures.outputs.json) }}
        target:
          - dev
          - build
    steps:
      - name: Login to GitHub Container Registry
        id: ghcr-login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        id: docker-hub-login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Release (pull candidate, tag, push)
        env:
          DHNS: ${{ needs.namespaces.outputs.docker-hub }}
          GHCRNS: ${{ needs.namespaces.outputs.ghcr }}
          TARGET: ${{ matrix.target }}
          ARCHITECTURE: ${{ matrix.architecture }}
          CANDIDATE: ${{ needs.release-trigger.outputs.tag }}
          VERSIONS: ${{ needs.tags.outputs.versions }}
          LATEST: ${{ needs.tags.outputs.latest }}
        run: |
          REPOSITORY=zmk-${TARGET}-${ARCHITECTURE}
          
          docker pull docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} docker.io/${DHNS}/${REPOSITORY}:${VERSIONS}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} docker.io/${DHNS}/${REPOSITORY}:${LATEST}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} ghcr.io/${GHCRNS}/${REPOSITORY}:${CANDIDATE}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} ghcr.io/${GHCRNS}/${REPOSITORY}:${VERSIONS}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} ghcr.io/${GHCRNS}/${REPOSITORY}:${LATEST}
          docker push docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE}
          docker push docker.io/${DHNS}/${REPOSITORY}:${VERSIONS}
          docker push docker.io/${DHNS}/${REPOSITORY}:${LATEST}
          docker push ghcr.io/${GHCRNS}/${REPOSITORY}:${CANDIDATE}
          docker push ghcr.io/${GHCRNS}/${REPOSITORY}:${VERSIONS}
          docker push ghcr.io/${GHCRNS}/${REPOSITORY}:${LATEST}
  git-tag:
    needs:
    - tags
    - releases
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Tag
        env:
          TAG: ${{ needs.tags.outputs.major-minor }}
        run: |
          git tag ${TAG}
          git push -f origin ${TAG}
