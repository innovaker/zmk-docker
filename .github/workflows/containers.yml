name: Containers

env:
  zephyr-version: 2.4.0
  zephyr-sdk-version: 0.11.4
  main-branch: main
  cache-repository-name: zmk-docker-cache
  upstream-docker-hub-namespace: zmkfirmware
  zmk-repository: zmkfirmware/zmk
  zmk-ref: main

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # every Sunday at 02:00

concurrency: ${{ github.ref }}

jobs:
  credentials:
    runs-on: ubuntu-latest
    outputs:
      ghcr: ${{ steps.ghcr.outcome == 'success' }}
      docker-hub: ${{ steps.docker-hub.outcome == 'success' }}
    steps:
      - name: Docker Hub
        id: docker-hub
        run: if [ ${{ secrets.DOCKER_HUB_USERNAME == null || secrets.DOCKER_HUB_TOKEN == null }} = true ]; then false; fi
        continue-on-error: true
      - name: GitHub Container Registry
        id: ghcr
        run: if [ ${{ secrets.GHCR_USERNAME == null || secrets.GHCR_TOKEN == null }} = true ]; then false; fi
        continue-on-error: true
  architectures:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.import.outputs.json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Import from architectures.yml
        id: import
        shell: python
        run: |
          import yaml, json
          with open('architectures.yml', 'r') as file:
            architectures = yaml.safe_load(file)
            print('::set-output name=json::' + json.dumps(architectures))
  tags:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.definitions.outputs.branch }}
      candidate: ${{ steps.definitions.outputs.candidate }}
      versions: ${{ steps.definitions.outputs.versions }}
      major-minor: ${{ steps.definitions.outputs.major-minor }}
      latest: ${{ steps.definitions.outputs.latest }}
    steps:
      - name: Definitions
        id: definitions
        env:
          SHA: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
          ZEPHYR_VERSION: ${{ env.zephyr-version }}
          ZEPHYR_SDK_VERSION: ${{ env.zephyr-sdk-version }}
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          CANDIDATE=${BRANCH}-${ZEPHYR_VERSION}-${ZEPHYR_SDK_VERSION}-$(date +%Y%m%d%H%M%S)-${SHA}-${RUN_ID}
          VERSIONS=${ZEPHYR_VERSION}-${ZEPHYR_SDK_VERSION}
          MAJOR=$(echo ${ZEPHYR_VERSION} | cut -d'.' -f 1)
          MINOR=$(echo ${ZEPHYR_VERSION} | cut -d'.' -f 2)
          MAJOR_MINOR=${MAJOR}.${MINOR}
          LATEST=${MAJOR_MINOR}

          echo ::set-output name=branch::${BRANCH}
          echo ::set-output name=candidate::${CANDIDATE}
          echo ::set-output name=versions::${VERSIONS}
          echo ::set-output name=major-minor::${MAJOR_MINOR}
          echo ::set-output name=latest::${LATEST}
  no-cache:
    needs:
    - credentials
    if: ${{ !startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    outputs:
      no-cache: ${{ steps.no-cache.outputs.no-cache }}
    steps:
      - name: Evaluate conditions
        id: no-cache
        run: echo ::set-output name=no-cache::${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
      - name: Guard against missing credentials
        run: |
          if [ "${{ steps.no-cache.outputs.no-cache == 'true' && needs.credentials.outputs.docker-hub != 'true' }}" = "true" ]; then
            echo "Fresh (no-cache) builds must have Docker Hub credentials to avoid a mismatch between the different types of caches."
            exit 1
          fi
  dev-generic:
    needs:
      - credentials
      - no-cache
    if: ${{ !startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        id: docker-hub-login
        if: ${{ needs.credentials.outputs.docker-hub == 'true' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Login to GitHub Container Registry
        id: ghcr-login
        if: ${{ needs.credentials.outputs.ghcr == 'true' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Define namespaces
        id: namespaces
        env:
          DOCKER_HUB: ${{ secrets.DOCKER_HUB_NAMESPACE || github.repository_owner }}
          GHCR: ${{ github.repository_owner }}
        shell: bash
        run: |
          echo ::set-output name=docker-hub::${DOCKER_HUB}
          echo ::set-output name=ghcr::${GHCR}
      - name: Define paths
        id: paths
        env:
          TARGET: dev-generic
          NS: ${{ steps.namespaces.outputs.docker-hub }}
          UNS: ${{ env.upstream-docker-hub-namespace }}
          REPOSITORY: ${{ env.cache-repository-name }}
          MAIN: ${{ env.main-branch }}
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo ::set-output name=local::/tmp/.buildx/${TARGET}
          echo ::set-output name=local-new::/tmp/.buildx/${TARGET}-new
          echo ::set-output name=target-branch::docker.io/${NS}/${REPOSITORY}:${BRANCH}-${TARGET}
          echo ::set-output name=target-main::docker.io/${NS}/${REPOSITORY}:${MAIN}-${TARGET}
          echo ::set-output name=target-branch-upstream::docker.io/${UNS}/${REPOSITORY}:${BRANCH}-${TARGET}
          echo ::set-output name=target-main-upstream::docker.io/${UNS}/${REPOSITORY}:${MAIN}-${TARGET}
      - name: Set up cache
        id: cache
        uses: actions/cache@v2
        env:
          cache-name: dev-generic
        with:
          path: ${{ steps.paths.outputs.local }}
          key: ${{ runner.os }}/${{ env.cache-name }}/${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}/${{ env.cache-name }}/
      - name: Rebuild cache?
        id: should-rebuild
        run: echo ::set-output name=value::${{ steps.cache.outputs.cache-hit != 'true' || needs.no-cache.outputs.no-cache == 'true' }}
      - name: Set up QEMU
        if: ${{ steps.should-rebuild.outputs.value == 'true' }}
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        if: ${{ steps.should-rebuild.outputs.value == 'true' }}
        uses: docker/setup-buildx-action@v1
      - name: Build to local cache
        if: ${{ steps.should-rebuild.outputs.value == 'true' }}
        uses: docker/build-push-action@v2
        with:
          target: dev-generic
          build-args: |
            ZEPHYR_VERSION=${{ env.zephyr-version }}
          no-cache: ${{ needs.no-cache.outputs.no-cache == 'true' }}
          cache-from: |
            type=registry,ref=${{ steps.paths.outputs.target-branch }}
            type=registry,ref=${{ steps.paths.outputs.target-main }}
            type=registry,ref=${{ steps.paths.outputs.target-branch-upstream }}
            type=registry,ref=${{ steps.paths.outputs.target-main-upstream }}
          cache-to: type=local,dest=${{ steps.paths.outputs.local-new }},mode=max
      # Workaround to stop the dev-generic cache ballooning ...
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Switch local cache
        if: ${{ steps.should-rebuild.outputs.value == 'true' }}
        run: |
          rm -rf ${{ steps.paths.outputs.local }}
          mv ${{ steps.paths.outputs.local-new }} ${{ steps.paths.outputs.local }}
      - name: Push to registry cache
        if: ${{ (steps.should-rebuild.outputs.value == 'true') && needs.credentials.outputs.docker-hub == 'true' }}
        uses: docker/build-push-action@v2
        with:
          target: dev-generic
          build-args: |
            ZEPHYR_VERSION=${{ env.zephyr-version }}
          cache-from: type=local,src=${{ steps.paths.outputs.local }}
          cache-to: type=registry,ref=${{ steps.paths.outputs.target-branch }},mode=max
  candidates:
    needs:
      - credentials
      - architectures
      - tags
      - no-cache
      - dev-generic
    if: ${{ !startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    env:
      docker-args: --rm --workdir /github/workspace -v /var/run/docker.sock:/var/run/docker.sock -v /home/runner/work/_temp:/home/runner/work/_temp -v /home/runner/work/_temp/_github_home:/github/home -v /home/runner/work/_temp/_github_workflow:/github/workflow -v /home/runner/work/_temp/_runner_file_commands:/github/file_commands -v ${{ github.workspace }}:/github/workspace
    defaults:
      run:
        shell: /usr/bin/docker exec candidate /bin/bash {0}
    strategy:
      fail-fast: false
      matrix: 
        architecture: ${{ fromJSON(needs.architectures.outputs.json) }}
        include:
          - architecture: arm
            board: nice_nano
            shield: kyria_left
    concurrency: ${{ github.ref }}/${{ matrix.architecture }}
    steps:
      - name: Login to Docker Hub
        id: docker-hub-login
        if: ${{ needs.credentials.outputs.docker-hub == 'true' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Login to GitHub Container Registry
        id: ghcr-login
        if: ${{ needs.credentials.outputs.ghcr == 'true' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Define namespaces
        id: namespaces
        env:
          DOCKER_HUB: ${{ secrets.DOCKER_HUB_NAMESPACE || github.repository_owner }}
          GHCR: ${{ github.repository_owner }}
        shell: bash
        run: |
          echo ::set-output name=docker-hub::${DOCKER_HUB}
          echo ::set-output name=ghcr::${GHCR}
      - name: Define repositories
        id: repositories
        shell: bash
        run: |
          echo ::set-output name=build::zmk-build-${{ matrix.architecture }}
          echo ::set-output name=dev::zmk-dev-${{ matrix.architecture }}
      - name: Define paths
        id: paths
        shell: bash
        env:
          NS: ${{ steps.namespaces.outputs.docker-hub }}
          UNS: ${{ env.upstream-docker-hub-namespace }}
          TARGET: ${{ steps.repositories.outputs.target }}
          BUILD: ${{ steps.repositories.outputs.build }}
          DEV: ${{ steps.repositories.outputs.dev }}
          CANDIDATE: ${{ needs.tags.outputs.candidate }}
          BRANCH: ${{ needs.tags.outputs.branch }}
          MAIN: ${{ env.main-branch }}
        run: |
          echo ::set-output name=dev-generic::/tmp/.buildx/dev-generic
          echo ::set-output name=build-candidate::docker.io/${NS}/${BUILD}:${CANDIDATE}
          echo ::set-output name=build-branch::docker.io/${NS}/${BUILD}:${BRANCH}
          echo ::set-output name=build-main::docker.io/${NS}/${BUILD}:${MAIN}
          echo ::set-output name=build-main-upstream::docker.io/${UNS}/${BUILD}:${MAIN}
          echo ::set-output name=dev-candidate::docker.io/${NS}/${DEV}:${CANDIDATE}
          echo ::set-output name=dev-branch::docker.io/${NS}/${DEV}:${BRANCH}
          echo ::set-output name=dev-main::docker.io/${NS}/${DEV}:${MAIN}
          echo ::set-output name=dev-main-upstream::docker.io/${UNS}/${DEV}:${MAIN}
      - name: Define build-args
        id: build-args
        shell: bash
        run: |
          LIST="
            ZEPHYR_VERSION=${{ env.zephyr-version }}
            ARCHITECTURE=${{ matrix.architecture }}
            ZEPHYR_SDK_VERSION=${{ env.zephyr-sdk-version }}
          "
          LIST="${LIST//'%'/'%25'}"
          LIST="${LIST//$'\n'/'%0A'}"
          LIST="${LIST//$'\r'/'%0D'}"
          echo ::set-output name=list::${LIST}
      - name: Define labels
        id: labels
        shell: bash
        run: |
          LIST="
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          "
          LIST="${LIST//'%'/'%25'}"
          LIST="${LIST//$'\n'/'%0A'}"
          LIST="${LIST//$'\r'/'%0D'}"
          echo ::set-output name=list::${LIST}
      - name: Set up dev-generic cache
        id: dev-generic-cache
        uses: actions/cache@v2
        env:
          cache-name: dev-generic
        with:
          path: ${{ steps.paths.outputs.dev-generic }}
          key: ${{ runner.os }}/${{ env.cache-name }}/${{ github.run_id }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and load 'build' candidate image
        uses: docker/build-push-action@v2
        with:
          target: build
          build-args: |
            ${{ steps.build-args.outputs.list }}
          labels: |
            ${{ steps.labels.outputs.list }}
          tags: |
            ${{ steps.paths.outputs.build-candidate }}
            ${{ steps.paths.outputs.build-branch }}
          cache-from: |
            type=local,src=${{ steps.paths.outputs.dev-generic }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.build-branch) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.dev-branch) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.build-main) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.dev-main) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.build-main-upstream) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.dev-main-upstream) }}
          cache-to: type=inline
          load: true
      - name: Build and load 'dev' candidate image
        uses: docker/build-push-action@v2
        with:
          target: dev
          build-args: |
            ${{ steps.build-args.outputs.list }}
          labels: |
            ${{ steps.labels.outputs.list }}
          tags: |
            ${{ steps.paths.outputs.dev-candidate }}
            ${{ steps.paths.outputs.dev-branch }}
          cache-from: |
            type=registry,ref=${{ steps.paths.outputs.build-candidate }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.dev-candidate) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.dev-branch) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.dev-main) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.dev-branch-upstream) }}
            ${{ needs.no-cache.outputs.no-cache == 'false' && format('type=registry,ref={0}', steps.paths.outputs.dev-main-upstream) }}
          cache-to: type=inline
          load: true
      - name: Create and run container from candidate image
        shell: bash
        run: docker run -d -it --name candidate ${{ env.docker-args }} ${{ steps.paths.outputs.dev-candidate }}
      - name: Define ZMK repository and ref
        id: zmk
        env:
          REPOSITORY: ${{ secrets.ZMK_REPOSITORY || env.zmk-repository }}
          REF: ${{ secrets.ZMK_REF || env.zmk-ref }}
        shell: bash
        run: |
          echo ::set-output name=repository::${REPOSITORY}
          echo ::set-output name=ref::${REF}
      - name: Checkout ZMK
        uses: actions/checkout@v2
        with:
          repository: ${{ steps.zmk.outputs.repository }}
          ref: ${{ steps.zmk.outputs.ref }}
      - name: Cache west modules
        uses: actions/cache@v2
        env:
          cache-name: zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
          key: ${{ runner.os }}/${{ env.cache-name }}/${{ hashFiles('app/west.yml') }}
          restore-keys: |
            ${{ runner.os }}/${{ env.cache-name }}/
      - name: Test west init
        run: west init -l app
      - name: Test west update
        run: west update
      - name: Test west zephyr-export
        run: west zephyr-export
      - name: Test west build
        if: ${{ matrix.board != null && matrix.shield != null }}
        run: west build -s app -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}
      - name: Test west build -t clean
        if: ${{ matrix.board != null && matrix.shield != null }}
        run: west build -t clean
      - name: Test west test
        if: false
        run: west test
      - name: Test clang-format
        run: clang-format --version
      - name: Test node
        run: node --version
      - name: Test docs ci
        run: cd docs && npm ci
      - name: Test docs lint
        run: cd docs && npm run lint
      - name: Test docs prettier check
        run: cd docs && npm run prettier:check
      - name: Test docs start (webpack-dev-server)
        run: cd docs && timeout -s SIGINT 20 npm run start &
      - run: sleep 15
      - name: Test docs wget (webpack-dev-server)
        run: wget http://localhost:3000
      - run: sleep 10
      - name: Test docs build (webpack)
        run: cd docs && npm run build
      - name: Test docs serve (webpack)
        run: cd docs && timeout -s SIGINT 10 npm run serve &
      - run: sleep 5
      - name: Test docs wget (webpack)
        run: wget http://localhost:3000
      - name: Test ssh
        run: ssh -V
      - name: Stop container
        shell: bash
        run: docker stop candidate
      - name: Push candidate image to registry
        if: ${{ steps.docker-hub-login.outcome == 'success' }}
        shell: bash
        run: |
          docker image push ${{ steps.paths.outputs.build-candidate }}
          docker image push ${{ steps.paths.outputs.build-branch }}
          docker image push ${{ steps.paths.outputs.dev-candidate }}
          docker image push ${{ steps.paths.outputs.dev-branch }}
  release-trigger:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.match.outputs.tag }}
      branch: ${{ steps.match.outputs.branch }}
      zephyr-version: ${{ steps.match.outputs.zephyr-version }}
      zephyr-version-major: ${{ steps.match.outputs.zephyr-version-major }}
      zephyr-version-minor: ${{ steps.match.outputs.zephyr-version-minor }}
      zephyr-version-patch: ${{ steps.match.outputs.zephyr-version-patch }}
      zephyr-sdk-version: ${{ steps.match.outputs.zephyr-sdk-version }}
      zephyr-sdk-version-major: ${{ steps.match.outputs.zephyr-sdk-version-major }}
      zephyr-sdk-version-minor: ${{ steps.match.outputs.zephyr-sdk-version-minor }}
      zephyr-sdk-version-patch: ${{ steps.match.outputs.zephyr-sdk-version-patch }}
      date: ${{ steps.match.outputs.date }}
      time: ${{ steps.match.outputs.time }}
      year: ${{ steps.match.outputs.year }}
      month: ${{ steps.match.outputs.month }}
      day: ${{ steps.match.outputs.day }}
      hour: ${{ steps.match.outputs.hour }}
      minute: ${{ steps.match.outputs.minute }}
      second: ${{ steps.match.outputs.second }}
      sha: ${{ steps.match.outputs.sha }}
      run-id: ${{ steps.match.outputs.run-id }}
    steps:
      - name: Is tag a release trigger?
        id: match
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          PATTERN="^(.+?)-(([0-9]+)\.([0-9]+)\.([0-9]+))-(([0-9]+)\.([0-9]+)\.([0-9]+))-((([0-9]{4})(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))((?:([01]?\d|2[0-3])([0-5]?\d))?([0-5]?\d)))-([0-9a-fA-F]+)-([0-9]+)$"
          if [[ "${TAG}" =~ $PATTERN ]]; then
            echo ::set-output name=tag::${TAG}
            echo ::set-output name=branch::${BASH_REMATCH[1]}
            echo ::set-output name=zephyr-version::${BASH_REMATCH[2]}
            echo ::set-output name=zephyr-version-major::${BASH_REMATCH[3]}
            echo ::set-output name=zephyr-version-minor::${BASH_REMATCH[4]}
            echo ::set-output name=zephyr-version-patch::${BASH_REMATCH[5]}
            echo ::set-output name=zephyr-sdk-version::${BASH_REMATCH[6]}
            echo ::set-output name=zephyr-sdk-version-major::${BASH_REMATCH[7]}
            echo ::set-output name=zephyr-sdk-version-minor::${BASH_REMATCH[8]}
            echo ::set-output name=zephyr-sdk-version-patch::${BASH_REMATCH[9]}
            echo ::set-output name=date::${BASH_REMATCH[10]}
            echo ::set-output name=time::${BASH_REMATCH[11]}
            echo ::set-output name=year::${BASH_REMATCH[12]}
            echo ::set-output name=month::${BASH_REMATCH[13]}
            echo ::set-output name=day::${BASH_REMATCH[14]}
            echo ::set-output name=hour::${BASH_REMATCH[16]}
            echo ::set-output name=minute::${BASH_REMATCH[17]}
            echo ::set-output name=second::${BASH_REMATCH[18]}
            SHA=${BASH_REMATCH[19]}
            echo ::set-output name=sha::${SHA}
            echo ::set-output name=run-id::${BASH_REMATCH[20]}

            if [ "${{ github.sha }}" != "${SHA}" ]; then
              echo "Git hashes do not match!"
              echo "Docker tag: ${SHA}"
              echo "Git tag: ${{ github.sha }}"
              exit 1
            fi
          else
            echo "Tag not recognised, ignoring ..."
          fi
        continue-on-error: true
  releases:
    needs:
      - credentials
      - architectures
      - tags
      - release-trigger
    if: ${{ needs.release-trigger.outputs.sha != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: ${{ fromJSON(needs.architectures.outputs.json) }}
        target:
          - build
          - dev
    steps:
      - name: Login to GitHub Container Registry
        id: ghcr-login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        id: docker-hub-login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Release (pull candidate, tag, push)
        env:
          DHNS: ${{ secrets.DOCKER_HUB_NAMESPACE || github.repository_owner }}
          GHCRNS: ${{ github.repository_owner }}
          TARGET: ${{ matrix.target }}
          ARCHITECTURE: ${{ matrix.architecture }}
          CANDIDATE: ${{ needs.release-trigger.outputs.tag }}
          VERSIONS: ${{ needs.tags.outputs.versions }}
          LATEST: ${{ needs.tags.outputs.latest }}
        run: |
          REPOSITORY=zmk-${TARGET}-${ARCHITECTURE}
          
          docker pull docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} docker.io/${DHNS}/${REPOSITORY}:${VERSIONS}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} docker.io/${DHNS}/${REPOSITORY}:${LATEST}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} ghcr.io/${GHCRNS}/${REPOSITORY}:${CANDIDATE}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} ghcr.io/${GHCRNS}/${REPOSITORY}:${VERSIONS}
          docker tag docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE} ghcr.io/${GHCRNS}/${REPOSITORY}:${LATEST}
          docker push docker.io/${DHNS}/${REPOSITORY}:${CANDIDATE}
          docker push docker.io/${DHNS}/${REPOSITORY}:${VERSIONS}
          docker push docker.io/${DHNS}/${REPOSITORY}:${LATEST}
          docker push ghcr.io/${GHCRNS}/${REPOSITORY}:${CANDIDATE}
          docker push ghcr.io/${GHCRNS}/${REPOSITORY}:${VERSIONS}
          docker push ghcr.io/${GHCRNS}/${REPOSITORY}:${LATEST}
  git-tag:
    needs:
    - tags
    - releases
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Tag
        env:
          TAG: ${{ needs.tags.outputs.major-minor }}
        run: |
          git tag ${TAG}
          git push -f origin ${TAG}
